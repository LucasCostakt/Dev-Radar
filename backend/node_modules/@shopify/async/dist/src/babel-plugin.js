"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var DEFAULT_PACKAGES_TO_PROCESS = {
    '@shopify/async': ['createResolver'],
    '@shopify/react-async': ['createAsyncContext', 'createAsyncComponent'],
    '@shopify/react-graphql': ['createAsyncQueryComponent', 'createAsyncQuery'],
};
function asyncBabelPlugin(_a) {
    var t = _a.types;
    return {
        visitor: {
            Program: function (_path, state) {
                state.processPackages = new Map(Object.entries((state.opts && state.opts.packages) || DEFAULT_PACKAGES_TO_PROCESS));
            },
            ImportDeclaration: function (path, state) {
                var e_1, _a;
                var processPackages = state.processPackages;
                if (!(processPackages instanceof Map)) {
                    return;
                }
                var source = path.node.source.value;
                var processImports = processPackages.get(source) || [];
                if (processImports.length === 0) {
                    return;
                }
                var importSpecifiersToProcess = path
                    .get('specifiers')
                    .filter(function (specifier) {
                    return (specifier.isImportSpecifier() &&
                        processImports.some(function (name) {
                            return specifier.get('imported').isIdentifier({ name: name });
                        }));
                });
                if (importSpecifiersToProcess.length === 0) {
                    return;
                }
                try {
                    for (var importSpecifiersToProcess_1 = tslib_1.__values(importSpecifiersToProcess), importSpecifiersToProcess_1_1 = importSpecifiersToProcess_1.next(); !importSpecifiersToProcess_1_1.done; importSpecifiersToProcess_1_1 = importSpecifiersToProcess_1.next()) {
                        var importSpecifier = importSpecifiersToProcess_1_1.value;
                        var bindingName = importSpecifier.node.local.name;
                        var binding = path.scope.getBinding(bindingName);
                        if (binding != null) {
                            addIdOption(binding, t, state.opts);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (importSpecifiersToProcess_1_1 && !importSpecifiersToProcess_1_1.done && (_a = importSpecifiersToProcess_1.return)) _a.call(importSpecifiersToProcess_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            },
        },
    };
}
exports.default = asyncBabelPlugin;
function addIdOption(binding, t, _a) {
    var _b = (_a === void 0 ? {} : _a).webpack, webpack = _b === void 0 ? true : _b;
    binding.referencePaths.forEach(function (refPath) {
        var callExpression = refPath.parentPath;
        if (!callExpression.isCallExpression()) {
            return;
        }
        var args = callExpression.get('arguments');
        if (args.length === 0) {
            return;
        }
        var options = args[0];
        if (!options.isObjectExpression()) {
            return;
        }
        var properties = options.get('properties');
        var propertiesMap = {};
        properties.forEach(function (property) {
            if (!property.isObjectMember() || property.node.computed) {
                return;
            }
            var key = property.get('key');
            if (!key.isIdentifier()) {
                return;
            }
            propertiesMap[key.node.name] = property;
        });
        var id = propertiesMap.id, loadProperty = propertiesMap.load;
        if (id != null || loadProperty == null) {
            return;
        }
        var loaderMethod = loadProperty.isObjectProperty()
            ? loadProperty.get('value')
            : loadProperty.get('body');
        var dynamicImports = [];
        if (!Array.isArray(loaderMethod)) {
            loaderMethod.traverse({
                Import: function (_a) {
                    var parentPath = _a.parentPath;
                    if (parentPath.isCallExpression()) {
                        dynamicImports.push(parentPath);
                    }
                },
            });
        }
        if (!dynamicImports.length) {
            return;
        }
        if (webpack) {
            loadProperty.insertAfter(t.objectProperty(t.identifier('id'), t.arrowFunctionExpression([], t.callExpression(t.memberExpression(t.identifier('require'), t.identifier('resolveWeak')), [dynamicImports[0].get('arguments')[0].node]))));
        }
        else {
            propertiesMap.load.insertAfter(t.objectProperty(t.identifier('id'), t.arrowFunctionExpression([], t.callExpression(t.memberExpression(t.identifier('require'), t.identifier('resolve')), [dynamicImports[0].get('arguments')[0].node]))));
        }
    });
}
